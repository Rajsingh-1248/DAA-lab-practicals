#include <stdio.h>
#include <stdlib.h>

// Function to compare two integers (used in qsort)
int compare(const void *a, const void *b) {
    return ((int)a - (int)b);
}

// Function to find duplicates in a sorted array
void findDuplicates(int arr[], int n) {
    // Step 1: Sort the array using quicksort (O(n log n))
    qsort(arr, n, sizeof(int), compare);

    printf("Duplicate elements: ");
    int found = 0;

    // Step 2: Scan and find adjacent duplicates
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] == arr[i + 1]) {
            printf("%d ", arr[i]);
            found = 1;
            // Skip further duplicates of the same number
            while (i < n - 1 && arr[i] == arr[i + 1])
                i++;
        }
    }

    if (!found)
        printf("None");

    printf("\n");
}

// Driver function
int main() {
    int arr[] = {4, 2, 7, 4, 8, 2, 5, 1, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    findDuplicates(arr, n);
    
    return 0;
}


#include <stdio.h>

// Global variables to track comparisons and inversions
int comparisons = 0, inversions = 0;

// Function to merge two sorted halves and count comparisons & inversions
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    int leftArr[n1], rightArr[n2];

    // Copy data to temp arrays
    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;

    // Merge the two arrays
    while (i < n1 && j < n2) {
        comparisons++; // Counting comparisons
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            inversions += (n1 - i); // Count inversions
        }
    }

    // Copy remaining elements
    while (i < n1)
        arr[k++] = leftArr[i++];
    while (j < n2)
        arr[k++] = rightArr[j++];
}

// Recursive Merge Sort function
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Driver function
int main() {
    int arr[] = {5, 3, 8, 4, 2};
    int n = sizeof(arr) / sizeof(arr[0]);

    mergeSort(arr, 0, n - 1);

    // Print sorted array
    printf("Sorted Array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);

    printf("\nTotal Comparisons: %d\nTotal Inversions: %d\n", comparisons, inversions);
    return 0;
}
